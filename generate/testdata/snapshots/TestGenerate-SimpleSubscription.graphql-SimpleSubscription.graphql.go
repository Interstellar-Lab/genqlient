// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package test

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// SimpleSubscriptionResponse is returned by SimpleSubscription on success.
type SimpleSubscriptionResponse struct {
	Count int `json:"count"`
}

// GetCount returns SimpleSubscriptionResponse.Count, and is useful for accessing the field via an interface.
func (v *SimpleSubscriptionResponse) GetCount() int { return v.Count }

// The query, mutation or subscription executed by SimpleSubscription.
const SimpleSubscription_Operation = `
subscription SimpleSubscription {
	count
}
`

func SimpleSubscription(
	client_ graphql.Client,
) (chan SimpleSubscriptionWsResponse, chan struct{}, chan error, error) {
	req_ := &graphql.Request{
		OpName: "SimpleSubscription",
		Query:  SimpleSubscription_Operation,
	}
	var err_ error

	var data_ SimpleSubscriptionResponse
	resp_ := &graphql.Response{Data: &data_}

	dataChan_ := make(chan SimpleSubscriptionWsResponse, 1)
	dataUpdated_ := make(chan bool, 1)

	doneChan_, errChan_, err_ := client_.DialWebSocket(context.Background(), req_, resp_, dataUpdated_)
	if err_ != nil {
		return nil, nil, nil, err_
	}
	go SimpleSubscriptionForwardData(dataChan_, resp_, dataUpdated_, errChan_)

	return dataChan_, doneChan_, errChan_, err_
}

type SimpleSubscriptionWsResponse struct {
	Data       *SimpleSubscriptionResponse
	Extensions map[string]interface{}
	Errors     error
}

func SimpleSubscriptionForwardData(dataChan_ chan SimpleSubscriptionWsResponse, resp_ *graphql.Response, dataUpdated_ chan bool, errChan_ chan error) {
	defer close(dataChan_)
	for {
		_, more_ := <-dataUpdated_
		if !more_ {
			return
		}
		data_ := SimpleSubscriptionWsResponse{
			Extensions: resp_.Extensions,
			Errors:     resp_.Errors,
		}
		if resp_.Data != nil {
			data_.Data = resp_.Data.(*SimpleSubscriptionResponse)
		}
		dataChan_ <- data_
	}
}

