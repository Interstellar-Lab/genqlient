// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package test

import (
	"context"
	"encoding/json"

	"github.com/Khan/genqlient/graphql"
)

// SimpleSubscriptionResponse is returned by SimpleSubscription on success.
type SimpleSubscriptionResponse struct {
	Count int `json:"count"`
}

// GetCount returns SimpleSubscriptionResponse.Count, and is useful for accessing the field via an interface.
func (v *SimpleSubscriptionResponse) GetCount() int { return v.Count }

// The query, mutation or subscription executed by SimpleSubscription.
const SimpleSubscription_Operation = `
subscription SimpleSubscription {
	count
}
`

// SimpleSubscription
//
// To close the connection, use [graphql.WebSocketClient.CloseConnection()]
func SimpleSubscription(
	client_ graphql.Client,
) (dataChan_ chan SimpleSubscriptionWsResponse, errChan_ chan error, err error) {
	req_ := &graphql.Request{
		OpName: "SimpleSubscription",
		Query:  SimpleSubscription_Operation,
	}
	var err_ error

	dataChan_ = make(chan SimpleSubscriptionWsResponse, 1)
	respChan_ := make(chan json.RawMessage, 1)

	errChan_, err_ = client_.DialWebSocket(context.Background(), req_, respChan_)
	if err_ != nil {
		return nil, nil, err_
	}
	go SimpleSubscriptionForwardData(dataChan_, respChan_, errChan_)

	return dataChan_, errChan_, err_
}

type SimpleSubscriptionWsResponse struct {
	Data       *SimpleSubscriptionResponse `json:"data"`
	Extensions map[string]interface{}      `json:"extensions,omitempty"`
	Errors     error                       `json:"errors"`
}

func SimpleSubscriptionForwardData(dataChan_ chan SimpleSubscriptionWsResponse, respChan_ chan json.RawMessage, errChan_ chan error) {
	defer close(dataChan_)
	var gqlResp graphql.Response
	var wsResp SimpleSubscriptionWsResponse
	for {
		jsonRaw, more_ := <-respChan_
		if !more_ {
			return
		}
		err := json.Unmarshal(jsonRaw, &gqlResp)
		if err != nil {
			errChan_ <- err
			return
		}
		if len(gqlResp.Errors) == 0 {
			err = json.Unmarshal(jsonRaw, &wsResp)
			if err != nil {
				errChan_ <- err
				return
			}
		} else {
			wsResp.Errors = gqlResp.Errors
		}
		dataChan_ <- wsResp
	}
}

