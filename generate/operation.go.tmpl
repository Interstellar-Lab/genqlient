// The query, mutation or subscription executed by {{.Name}}.
const {{.Name}}_Operation = `{{$.Body}}`

{{.Doc}}
{{if eq .Type "subscription"}}
{{if eq .Doc ""}}
// {{.Name}}
{{end -}}
//
// To close the connection, use the doneChan_: `defer doneChan_ <- true`
{{end -}}
func {{.Name}}(
    {{if ne .Config.ContextType "-" -}}
    ctx_ {{ref .Config.ContextType}},
    {{end}}
    {{- if not .Config.ClientGetter -}}
    client_ {{ref "github.com/Khan/genqlient/graphql.Client"}},
    {{end}}
    {{- if .Input -}}
    {{- range .Input.Fields -}}
    {{/* the GraphQL name here is the user-specified variable-name */ -}}
    {{.GraphQLName}} {{.GoType.Reference}},
    {{end -}}
    {{end -}}
) ({{if eq .Type "subscription"}}dataChan_ chan {{.Name}}WsResponse, doneChan_ chan bool, errChan_ chan error,{{else}}data_ *{{.ResponseName}}, {{if .Config.Extensions -}}ext_ map[string]interface{},{{end}}{{end}} err error) {
    req_ := &graphql.Request{
        OpName: "{{.Name}}",
        Query:  {{.Name}}_Operation,
    {{if .Input -}}
        Variables: &{{.Input.GoName}}{
        {{range .Input.Fields -}}
        {{.GoName}}: {{.GraphQLName}},
        {{end -}}
        },
    {{end -}}
    }
    var err_ error
    {{if .Config.ClientGetter -}}
    var client_ graphql.Client

    client_, err_ = {{ref .Config.ClientGetter}}({{if ne .Config.ContextType "-"}}ctx_{{else}}{{end}})
    if err_ != nil {
        return nil, {{if .Config.Extensions -}}nil,{{end -}} err_
    }
    {{end}}
    {{if eq .Type "subscription"}}
    dataChan_ = make(chan {{.Name}}WsResponse, 1)
    respChan_ := make(chan json.RawMessage, 1)

    doneChan_, errChan_, err_ = client_.DialWebSocket({{if ne .Config.ContextType "-" -}}ctx_{{else}}context.Background(){{end}}, req_, respChan_)
	if err_ != nil {
		return nil, nil, nil, err_
	}
    go {{.Name}}ForwardData(dataChan_, errChan_, respChan_)
    {{else}}
    data_ = &{{.ResponseName}}{}
    resp_ := &graphql.Response{Data: data_}

    err_ = client_.MakeRequest(
        {{if ne .Config.ContextType "-"}}ctx_{{else}}nil{{end}},
        req_,
        resp_,
    )
    {{end}}
	
    return {{if eq .Type "subscription"}}dataChan_, doneChan_, errChan_,{{else}}data_, {{if .Config.Extensions -}}resp_.Extensions,{{end -}}{{end}} err_
}

{{if eq .Type "subscription"}}
type {{.Name}}WsResponse struct {
	Data       *{{.ResponseName}}     `json:"data"`
	Extensions map[string]interface{} `json:"extensions,omitempty"`
	Errors     error                  `json:"errors"`
}

func {{.Name}}ForwardData(dataChan_ chan {{.Name}}WsResponse, errChan_ chan error, respChan_ chan json.RawMessage) {
    defer close(dataChan_)
    var gqlResp graphql.Response
	var wsResp {{.Name}}WsResponse
	for {
		jsonRaw, more_ := <-respChan_
		if !more_ {
			return
		}
		err := json.Unmarshal(jsonRaw, &gqlResp)
		if err != nil {
			errChan_ <- err
			return
		}
		if len(gqlResp.Errors) == 0 {
			err = json.Unmarshal(jsonRaw, &wsResp)
			if err != nil {
				errChan_ <- err
				return
			}
		} else {
			wsResp.Errors = gqlResp.Errors
		}
		dataChan_ <- wsResp
	}
}
{{end}}
