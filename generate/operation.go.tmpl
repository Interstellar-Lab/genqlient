// The query, mutation or subscription executed by {{.Name}}.
const {{.Name}}_Operation = `{{$.Body}}`

{{.Doc}}
func {{.Name}}(
    {{if ne .Config.ContextType "-" -}}
    ctx_ {{ref .Config.ContextType}},
    {{end}}
    {{- if not .Config.ClientGetter -}}
    client_ {{ref "github.com/Khan/genqlient/graphql.Client"}},
    {{end}}
    {{- if .Input -}}
    {{- range .Input.Fields -}}
    {{/* the GraphQL name here is the user-specified variable-name */ -}}
    {{.GraphQLName}} {{.GoType.Reference}},
    {{end -}}
    {{end -}}
) ({{if eq .Type "subscription"}}chan {{.Name}}WsResponse{{else}}*{{.ResponseName}}{{end}}, {{if eq .Type "subscription"}}chan struct{}, chan error, {{end}}{{if .Config.Extensions -}}map[string]interface{},{{end}} error) {
    req_ := &graphql.Request{
        OpName: "{{.Name}}",
        Query:  {{.Name}}_Operation,
    {{if .Input -}}
        Variables: &{{.Input.GoName}}{
        {{range .Input.Fields -}}
        {{.GoName}}: {{.GraphQLName}},
        {{end -}}
        },
    {{end -}}
    }
    var err_ error
    {{if .Config.ClientGetter -}}
    var client_ graphql.Client

    client_, err_ = {{ref .Config.ClientGetter}}({{if ne .Config.ContextType "-"}}ctx_{{else}}{{end}})
    if err_ != nil {
        return nil, {{if .Config.Extensions -}}nil,{{end -}} err_
    }
    {{end}}
    var data_ {{.ResponseName}}
    resp_ := &graphql.Response{Data: &data_}
    {{if eq .Type "subscription"}}
    dataChan_ := make(chan {{.Name}}WsResponse, 1)
    dataUpdated_ := make(chan bool, 1)

    doneChan_, errChan_, err_ := client_.DialWebSocket({{if ne .Config.ContextType "-" -}}ctx_{{else}}context.Background(){{end}}, req_, resp_, dataUpdated_)
	if err_ != nil {
		return nil, nil, nil,{{if .Config.Extensions -}} nil,{{end}} err_
	}
    go {{.Name}}ForwardData(dataChan_, resp_, dataUpdated_, errChan_)
    {{else}}

    err_ = client_.MakeRequest(
        {{if ne .Config.ContextType "-"}}ctx_{{else}}nil{{end}},
        req_,
        resp_,
    )
    {{end}}
	
    return {{if eq .Type "subscription"}}dataChan_, doneChan_, errChan_{{else}}&data_{{end}}, {{if .Config.Extensions -}}resp_.Extensions,{{end -}} err_
}

{{if eq .Type "subscription"}}
type {{.Name}}WsResponse struct {
	Data       *{{.ResponseName}}
	Extensions map[string]interface{}
	Errors     error
}

func {{.Name}}ForwardData(dataChan_ chan {{.Name}}WsResponse, resp_ *graphql.Response, dataUpdated_ chan bool, errChan_ chan error) {
    defer close(dataChan_)
	for {
		_, more_ := <-dataUpdated_
		if !more_ {
			return
		}
		data_ := {{.Name}}WsResponse{
			Extensions: resp_.Extensions,
			Errors: resp_.Errors,
		}
		if resp_.Data != nil {
			data_.Data = resp_.Data.(*{{.ResponseName}})
		}
		dataChan_ <- data_
	}
}
{{end}}
